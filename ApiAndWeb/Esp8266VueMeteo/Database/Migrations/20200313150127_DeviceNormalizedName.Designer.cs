// <auto-generated />
using System;
using Esp8266VueMeteo.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Esp8266VueMeteo.Database.Migrations
{
    [DbContext(typeof(MeteoDbContext))]
    [Migration("20200313150127_DeviceNormalizedName")]
    partial class DeviceNormalizedName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.Devices", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AqiEcoUpdateUrl");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("DeviceNormalizedName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<string>("Esp8266Id")
                        .IsRequired();

                    b.Property<string>("ExtraDescription")
                        .HasMaxLength(500);

                    b.Property<string>("HttpPassword")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("HttpUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("InsertDateTime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault");

                    b.Property<double?>("Latitude");

                    b.Property<bool>("LocationProvided")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Longtitude");

                    b.Property<int?>("Radius");

                    b.Property<bool>("SendToAqiEco");

                    b.Property<Guid>("UserId");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.JsonUpdates", b =>
                {
                    b.Property<Guid>("JsonUpdateId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTimeOffset>("InsertDateTime");

                    b.Property<string>("JsonValue")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("JsonUpdateId");

                    b.HasIndex("DeviceId");

                    b.ToTable("JsonUpdates");
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.Measurements", b =>
                {
                    b.Property<Guid>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<double?>("CellVoltage");

                    b.Property<Guid>("DeviceId");

                    b.Property<double?>("HeaterHumidity");

                    b.Property<double?>("HeaterTemperature");

                    b.Property<double?>("Humidity");

                    b.Property<DateTimeOffset>("InsertDateTime");

                    b.Property<double?>("Pm10");

                    b.Property<double?>("Pm25");

                    b.Property<double?>("Pressure");

                    b.Property<double?>("Temperature");

                    b.Property<double?>("WifiRssi");

                    b.HasKey("MeasurementId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2020, 3, 13, 16, 1, 27, 615, DateTimeKind.Local).AddTicks(3117));

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.Devices", b =>
                {
                    b.HasOne("Esp8266VueMeteo.Database.Models.Users", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.JsonUpdates", b =>
                {
                    b.HasOne("Esp8266VueMeteo.Database.Models.Devices", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Esp8266VueMeteo.Database.Models.Measurements", b =>
                {
                    b.HasOne("Esp8266VueMeteo.Database.Models.Devices", "Device")
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
